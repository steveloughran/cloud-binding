<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.hortonworks.cloud</groupId>
  <artifactId>cloud-binding</artifactId>
  <name>cloud-binding</name>
  <packaging>jar</packaging>
  <version>1.0-SNAPSHOT</version>
  <description>
    Creates a JAR which initially declares the transitive bindings to pull in
    a consistent set of dependencies across Spark, Hadoop, Hadoop's cloud modules
    (hadoop-aws, hadoop-azure, ...), and transitive variants.

    There's no way to introspect the spark artifacts to determine the Hadoop version
    used, or that of other artifacts (e.g. jackson). Instead profiles must explicitly
    be used to define the spark version and the Hadoop version; these are then applied to generate
    the final set of dependencies which are exported for downstream use.

    This complicates downstream use, in that it needs to be using exactly the same
  </description>
  <!--

    <repositories>
      <repository>
        <id>Spark Staging Repo</id>
        <url>https://repository.apache.org/content/repositories/orgapachespark-1075/</url>
      </repository>
    </repositories>
  -->

  <properties>
    <!-- These examples use the version of Hadoop which Spark was built with-->
    <scala.binary.version>2.11</scala.binary.version>
    <spark.version>2.3.0-SNAPSHOT</spark.version>
    <maven.properties.version>1.0-alpha-2</maven.properties.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <java.version>1.8</java.version>
    <scala.binary.version>2.11</scala.binary.version>
    <scala.version>2.11.8</scala.version>
    <scala.version.tools>${scala.version}</scala.version.tools>

    <test.build.dir>${project.build.directory}/test-dir</test.build.dir>
    <test.build.data>${test.build.dir}</test.build.data>
    <hadoop.tmp.dir>${project.build.directory}/test</hadoop.tmp.dir>


    <central.repo>https://repo1.maven.org/maven2</central.repo>

    <!-- Artifact versions, keep in alphabetical order -->
    <antlr4.version>4.5.3</antlr4.version>
    <avro.mapred.classifier>hadoop2</avro.mapred.classifier>
    <avro.version>1.7.7</avro.version>
    <aws.java.sdk.version>1.11.76</aws.java.sdk.version>
    <aws.kinesis.client.version>1.7.3</aws.kinesis.client.version>
    <aws.kinesis.producer.version>0.10.2</aws.kinesis.producer.version>
    <calcite.version>1.2.0-incubating</calcite.version>
    <chill.version>0.8.0</chill.version>
    <codahale.metrics.version>3.1.2</codahale.metrics.version>
    <codehaus.jackson.version>1.9.13</codehaus.jackson.version>
    <commons-codec.version>1.10</commons-codec.version>
    <commons-crypto.version>1.0.0</commons-crypto.version>
    <commons-io.version>2.4</commons-io.version>
    <!-- org.apache.commons/commons-lang/-->
    <commons-lang2.version>2.6</commons-lang2.version>
    <!-- org.apache.commons/commons-lang3/-->
    <commons-lang3.version>3.5</commons-lang3.version>
    <commons.collections.version>3.2.2</commons.collections.version>
    <!--  org.apache.httpcomponents/httpclient-->
    <commons.httpclient.version>4.5.2</commons.httpclient.version>
    <commons.httpcore.version>4.4.4</commons.httpcore.version>
    <commons.math3.version>3.4.1</commons.math3.version>
    <curator.version>2.6.0</curator.version>
    <datanucleus-core.version>3.2.10</datanucleus-core.version>
    <derby.version>10.12.1.1</derby.version>
    <fasterxml.jackson.version>2.6.5</fasterxml.jackson.version>
    <flume.version>1.6.0</flume.version>
    <hadoop.version>2.7.3</hadoop.version>
    <hive.group>org.spark-project.hive</hive.group>
    <hive.parquet.version>1.6.0</hive.parquet.version>
    <hive.version.short>1.2.1</hive.version.short>
    <hive.version>1.2.1.spark2</hive.version>
    <httpclient.classic.version>3.1</httpclient.classic.version>
    <ivy.version>2.4.0</ivy.version>
    <janino.version>3.0.0</janino.version>
    <javaxservlet.version>3.1.0</javaxservlet.version>
    <jersey.version>2.22.2</jersey.version>
    <jets3t.version>0.9.3</jets3t.version>
    <jetty.version>9.2.16.v20160414</jetty.version>
    <joda.version>2.9.3</joda.version>
    <jodd.version>3.5.2</jodd.version>
    <jpam.version>1.1</jpam.version>
    <jsr305.version>1.3.9</jsr305.version>
    <libthrift.version>0.9.3</libthrift.version>
    <log4j.version>1.2.17</log4j.version>
    <maven-antrun.version>1.8</maven-antrun.version>
    <netlib.java.version>1.1.2</netlib.java.version>
    <oro.version>2.0.8</oro.version>
    <paranamer.version>2.6</paranamer.version>
    <parquet.version>1.8.2</parquet.version>
    <protobuf.version>2.5.0</protobuf.version>
    <sbt.project.name>spark</sbt.project.name>
    <scala.binary.version>2.11</scala.binary.version>
    <scala.version>2.11.8</scala.version>
    <selenium.version>2.52.0</selenium.version>
    <slf4j.version>1.7.16</slf4j.version>
    <snappy.version>1.1.2.6</snappy.version>
    <yarn.version>${hadoop.version}</yarn.version>
    <zookeeper.version>3.4.6</zookeeper.version>

  </properties>

  <repositories>
    <repository>
      <id>central</id>
      <!-- This should be at top, it makes maven try the central repo first and then others and hence faster dep resolution -->
      <name>Maven Repository</name>
      <url>${central.repo}</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>central</id>
      <url>${central.repo}</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

  <dependencies>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-core_${scala.binary.version}</artifactId>
      <version>${spark.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-sql_${scala.binary.version}</artifactId>
      <version>${spark.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-streaming_${scala.binary.version}</artifactId>
      <version>${spark.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-hive_${scala.binary.version}</artifactId>
      <version>${spark.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-mllib_${scala.binary.version}</artifactId>
      <version>${spark.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- force in our Hadoop version, stripped down -->
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-annotations</artifactId>
      <version>${hadoop.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>jdk.tools</groupId>
          <artifactId>jdk.tools</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-client</artifactId>
      <version>${hadoop.version}</version>
      <scope>compile</scope>
      <exclusions>
        <exclusion>
          <groupId>javax.servlet</groupId>
          <artifactId>servlet-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>jetty</groupId>
          <artifactId>org.mortbay.jetty</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.mortbay.jetty</groupId>
          <artifactId>jetty</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.mortbay.jetty</groupId>
          <artifactId>servlet-api-2.5</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-json</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-server</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.eclipse.jdt</groupId>
          <artifactId>core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.apache.avro</groupId>
          <artifactId>avro-ipc</artifactId>
        </exclusion>
        <exclusion>
          <groupId>net.sf.kosmosfs</groupId>
          <artifactId>kfs</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.jcraft</groupId>
          <artifactId>jsch</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.apache.zookeeper</groupId>
          <artifactId>zookeeper</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!--
      the AWS module pulls in jackson; its transitive dependencies can create
      intra-jackson-module version problems.
      -->
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-aws</artifactId>
      <version>${hadoop.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.apache.hadoop</groupId>
          <artifactId>hadoop-common</artifactId>
        </exclusion>
        <exclusion>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-mapper-asl</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-core-asl</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-annotations</artifactId>
        </exclusion>
        <exclusion>
          <groupId>joda-time</groupId>
          <artifactId>joda-time</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-openstack</artifactId>
      <version>${hadoop.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.apache.hadoop</groupId>
          <artifactId>hadoop-common</artifactId>
        </exclusion>
        <exclusion>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </exclusion>
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.mockito</groupId>
          <artifactId>mockito-all</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!--
    Hadoop-Azure isn't in Hadoop 2.6, so this has to be made
    a 2.7+ moodule.
    -->
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-azure</artifactId>
      <version>${hadoop.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.apache.hadoop</groupId>
          <artifactId>hadoop-common</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-mapper-asl</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
        </exclusion>
      </exclusions>
  </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>${fasterxml.jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <version>${fasterxml.jackson.version}</version>
    </dependency>
    <!-- Guava is excluded because of SPARK-6149.  The Guava version referenced in this module is
         15.0, which causes runtime incompatibility issues. -->
    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-scala_${scala.binary.version}</artifactId>
      <version>${fasterxml.jackson.version}</version>
      <exclusions>
        <exclusion>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-jaxb-annotations</artifactId>
      <version>${fasterxml.jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-cbor</artifactId>
      <version>${fasterxml.jackson.version}</version>
    </dependency>

    <!--
    Add joda time to ensure that anything downstream which doesn't pull in spark-hive
    gets the correct joda time artifact, so doesn't have auth failures on later Java 8 JVMs
    -->
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version>${joda.version}</version>
    </dependency>

    <!--Explicit declaration to force in Spark version into transitive dependencies -->
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>${commons.httpclient.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore</artifactId>
      <version>${commons.httpcore.version}</version>
    </dependency>
  </dependencies>

  <build>

  </build>


  <profiles>
    <!--
 This is a profile to enable the use of the ASF snapshot and staging repositories
 during a build. It is useful when testing againt nightly or RC releases of dependencies.
 It MUST NOT be used when building copies of Spark to use in production of for distribution,
 -->
    <profile>
      <id>snapshots-and-staging</id>
      <properties>
        <!-- override point for ASF staging/snapshot repos -->
        <asf.staging>https://repository.apache.org/content/groups/staging/</asf.staging>
        <asf.snapshots>https://repository.apache.org/content/repositories/snapshots/</asf.snapshots>
      </properties>

      <pluginRepositories>
        <pluginRepository>
          <id>ASF Staging</id>
          <url>${asf.staging}</url>
        </pluginRepository>
        <pluginRepository>
          <id>ASF Snapshots</id>
          <url>${asf.snapshots}</url>
          <snapshots>
            <enabled>true</enabled>
          </snapshots>
          <releases>
            <enabled>false</enabled>
          </releases>
        </pluginRepository>

      </pluginRepositories>
      <repositories>
        <repository>
          <id>ASF Staging</id>
          <url>${asf.staging}</url>
        </repository>
        <repository>
          <id>ASF Snapshots</id>
          <url>${asf.snapshots}</url>
          <snapshots>
            <enabled>true</enabled>
          </snapshots>
          <releases>
            <enabled>false</enabled>
          </releases>
        </repository>
      </repositories>
    </profile>

    <profile>
      <id>spark-2.0</id>
      <properties>
        <spark.version>2.0.2</spark.version>
      </properties>
    </profile>

    <profile>
      <id>spark-2.1</id>
      <properties>
        <spark.version>2.1.0</spark.version>
        <scala.binary.version>2.11</scala.binary.version>
        <scala.version>2.11.7</scala.version>
      </properties>
    </profile>

    <profile>
      <id>spark-2.2-SNAPSHOT</id>
      <properties>
        <spark.version>2.2.0-SNAPSHOT</spark.version>
        <scala.binary.version>2.11</scala.binary.version>
        <scala.version>2.11.8</scala.version>
      </properties>
    </profile>

    <profile>
      <id>spark-master</id>
      <properties>
        <spark.version>2.3.0-SNAPSHOT</spark.version>
        <scala.binary.version>2.11</scala.binary.version>
        <scala.version>2.11.8</scala.version>
      </properties>
    </profile>

    <profile>
      <id>hadoop-2.7</id>
      <properties>
        <hadoop.version>2.7.3</hadoop.version>
      </properties>
    </profile>

    <profile>
      <id>hadoop-2.8</id>
      <properties>
        <hadoop.version>2.8.0</hadoop.version>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.hadoop</groupId>
          <artifactId>hadoop-azure-datalake</artifactId>
          <version>${hadoop.version}</version>
        </dependency>
      </dependencies>
    </profile>

    <!-- Uses the fully shaded AWS JAR. Life is simpler -->
    <profile>
      <id>hadoop-branch-2</id>
      <properties>
        <hadoop.version>2.9.0-SNAPSHOT</hadoop.version>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.hadoop</groupId>
          <artifactId>hadoop-azure-datalake</artifactId>
          <version>${hadoop.version}</version>
        </dependency>
      </dependencies>
    </profile>

    <!--
     Hive only works with Hadoop thinking it is a v2 binary, build it with that

      -Ddeclared.hadoop.version=2.11

     After which you can't work with HDFS very well. Only useful for testing
     client-code and miniclusters.

      * Uses the fully shaded AWS JAR.
      * Adds a new store: hadoop-aliyun
     -->
    <profile>
      <id>hadoop-trunk</id>
      <properties>
        <hadoop.version>3.0.0-alpha3-SNAPSHOT</hadoop.version>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.hadoop</groupId>
          <artifactId>hadoop-azure-datalake</artifactId>
          <version>${hadoop.version}</version>
        </dependency>
        <dependency>
          <groupId>org.apache.hadoop</groupId>
          <artifactId>hadoop-aliyun</artifactId>
          <version>${hadoop.version}</version>
        </dependency>
      </dependencies>
    </profile>

  </profiles>
</project>
